package com.stan.webfluxdemo1;

import com.alibaba.fastjson.support.spring.GenericFastJsonRedisSerializer;
import com.stan.webfluxdemo1.shirotest.Base64;
import com.stan.webfluxdemo1.shirotest.MyObjectInputStream;
import com.stan.webfluxdemo1.shirotest.SimpleSession;
import org.junit.Test;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * @Author: zengxp
 * @Date: 2022/1/7 20:24
 * @Desc:
 */
public class TempTest {
    public static void main(String[] args) {
        List<Float> floatList = new ArrayList<>();
        t1(floatList);

        List<Integer> integerList = new ArrayList<>();
        t1(integerList);

//        List<?> list = new ArrayList<>();
//        list.add("a");
    }

    private static void t1(List<? extends Number> list) {
        System.out.println(list);
    }

    /**
     * 反序列化原有的session 信息
     *
     * @throws Exception
     */
    @Test
    public void test() throws Exception {
//        String sessionStr = "x
        String sessionStr = "x'724F304142584E7941437076636D6375595842685932686C4C6E4E6F61584A764C6E4E6C63334E7062323475625764304C6C4E70625842735A564E6C63334E7062323664484B47343159786962674D414148687764774941323351414A446B794D7A51345A5441304C5759774E446B744E446B345A6931685932466B4C5749335A47553059324E6A4D7A673459334E794141357159585A684C6E563061577775524746305A5768716751464C5758515A417741416548423343414141415943585843797665484E78414834414133634941414142674A687445685A3464785941414141424E5032514141414D4D5463794C6A45314C6A45774C6A6B346333494145577068646D4575645852706243354959584E6F545746774251666177634D57594E454441414A47414170736232466B526D466A644739795351414A644768795A584E6F6232786B6548412F514141414141414144486349414141414541414141414A3041464276636D6375595842685932686C4C6E4E6F61584A764C6E4E31596D706C593351756333567763473979644335455A575A686457783055335669616D566A64454E76626E526C65485266515656555345564F56456C44515652465246395452564E545355394F5830744657584E794142467159585A684C6D7868626D6375516D39766247566862733067636F44566E5072754167414257674146646D4673645756346341463041453176636D6375595842685932686C4C6E4E6F61584A764C6E4E31596D706C593351756333567763473979644335455A575A686457783055335669616D566A64454E76626E526C6548526655464A4A546B4E4A5545464D5531395452564E545355394F5830744657584E7941444A76636D6375595842685932686C4C6E4E6F61584A764C6E4E31596D706C5933517555326C746347786C55484A70626D4E7063474673513239736247566A64476C766271682F574358476F77684B4177414254414150636D566862473151636D6C7559326C775957787A6441415054477068646D4576645852706243394E595841376548427A63674158616D46325953353164476C734C6B7870626D746C5A4568686332684E595841307745356345477A412B77494141566F414332466A5932567A633039795A475679654845416667414750304141414141414141783343414141414241414141414264414139593239744C6D5A76633356754C6D5A766333567564325668636D4E6C626E526C63693531633256794C6E4E6F61584A764C6E4A6C595778744C6B39755A55746C655578765A326C75556D5668624731664D584E794142647159585A684C6E56306157777554476C756132566B5347467A61464E6C644E68733131715633536F65416741416548494145577068646D4575645852706243354959584E6F55325630756B53466C5A6134747A5144414142346348634D41414141416A394141414141414141426441414C4D544D7A4D4449344F544D784F5468346541423341514678414834414548683465413D3D'";
        byte[] cachedSession = sessionStr.getBytes(StandardCharsets.UTF_8);

        // decode
        GenericFastJsonRedisSerializer serializer = new GenericFastJsonRedisSerializer();
        byte[] deserialize = (byte[]) serializer.deserialize(cachedSession);
        SimpleSession session1 = (SimpleSession) bytes2Object(Base64.decode(deserialize));
        System.out.println(session1);
        System.out.println(session1.getAttribute("userInfo"));
        System.out.println(session1.getAttributeKeys());
    }

    @Test
    public void test2() throws Exception {
        SimpleSession session = new SimpleSession();
        session.setAttribute("testId", 11111);
        session.setId(UUID.randomUUID());

        byte[] encode = Base64.encode(session2Bytes(session));

        GenericFastJsonRedisSerializer serializer = new GenericFastJsonRedisSerializer();
        byte[] serialize = serializer.serialize(encode);
        System.out.println(new String(serialize, StandardCharsets.UTF_8));

        // decode
        byte[] deserialize = (byte[]) serializer.deserialize(serialize);
        SimpleSession session1 = bytes2Session(Base64.decode(deserialize));
        System.out.println(session1);
        System.out.println(session1.getAttribute("testId"));
    }

//    public String doCreate(SimpleSession session) {
//        String sessionId = "sessionId:1111:";
//        byte[] encode = Base64.encode(session2Bytes(session));
//        redisTemplate.opsForValue().set(sessionId, encode);
//        return sessionId;
//    }

//    public Session doReadSession(Serializable sessionId) {
//        final String sessionIdKey = RedisKeyEnum.SESSION_ID_PREFIX.getKey() + sessionId;
//        Object cachedSession;
//        Session session = null;
//        if(!ObjectUtils.isEmpty(cachedSession = redisManager.get(sessionIdKey))) {
//            session = bytes2Session(Base64.decode((byte[])cachedSession));
//        }
//        return session;
//    }

    public byte[] session2Bytes(SimpleSession session) {
        byte[] bytes = null;
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try {
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
            objectOutputStream.writeObject(session);
            bytes = byteArrayOutputStream.toByteArray();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return bytes;
    }

    public SimpleSession bytes2Session(byte[] bytes) {
        SimpleSession session = null;
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
        ObjectInputStream objectInputStream;
        try {
            objectInputStream = new ObjectInputStream(byteArrayInputStream);
            session = (SimpleSession) objectInputStream.readObject();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return session;
    }

    public Object bytes2Object(byte[] bytes) {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
        ObjectInputStream objectInputStream;
        Object obj = null;
        try {
            objectInputStream = new MyObjectInputStream(byteArrayInputStream);
            obj = objectInputStream.readObject();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return obj;
    }
}


